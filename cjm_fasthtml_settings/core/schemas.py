"""Schema registry and management for settings"""

# AUTOGENERATED! DO NOT EDIT! File to edit: ../../nbs/core/schemas.ipynb.

# %% auto 0
__all__ = ['registry', 'SettingsRegistry']

# %% ../../nbs/core/schemas.ipynb 3
from pathlib import Path
from typing import Dict, Any, Optional

# %% ../../nbs/core/schemas.ipynb 5
class SettingsRegistry:
    """Registry for managing settings schemas.
    
    Provides a centralized place to register and access settings schemas.
    """
    
    def __init__(self):
        self._schemas: Dict[str, Dict[str, Any]] = {}
    
    def register(
        self,
        schema: Dict[str, Any],  # JSON Schema to register
        name: Optional[str] = None  # Optional name override (uses schema['name'] if not provided)
    ):
        """Register a settings schema.
        
        The schema must have a 'name' field, or you must provide a name parameter.
        """
        schema_name = name or schema.get('name')
        if not schema_name:
            raise ValueError("Schema must have a 'name' field or name must be provided")
        
        self._schemas[schema_name] = schema
    
    def get(
        self,
        name: str  # Name of the schema to retrieve
    ) -> Optional[Dict[str, Any]]:  # The schema dictionary, or None if not found
        """Get a registered schema by name."""
        return self._schemas.get(name)
    
    def list_schemas(self) -> list:  # List of registered schema names
        """List all registered schema names."""
        return list(self._schemas.keys())
    
    def get_all(self) -> Dict[str, Dict[str, Any]]:  # Dictionary of all schemas
        """Get all registered schemas."""
        return self._schemas.copy()

# %% ../../nbs/core/schemas.ipynb 10
# Module-level registry instance
# This is the single source of truth for all settings schemas
# Routes and other modules will import and use this instance
registry = SettingsRegistry()
