[
  {
    "objectID": "plugins.html",
    "href": "plugins.html",
    "title": "Plugins",
    "section": "",
    "text": "This module provides integration with the cjm-fasthtml-plugins library for extensible settings systems.\n\nUses PluginMetadata from cjm-fasthtml-plugins\nDefines PluginRegistryProtocol for registry compatibility\nApplications should use UnifiedPluginRegistry from cjm-fasthtml-plugins instead of SimplePluginRegistry\n\n\n# Cell removed - using PluginMetadata from cjm-fasthtml-plugins\n\n\n# Cell removed - PluginMetadata now imported from cjm-fasthtml-plugins\n# The imported version includes additional features:\n# - Execution mode tracking (local, cloud, subprocess, etc.)\n# - Resource management (child PIDs, containers, cloud instances)\n# - Lifecycle awareness support",
    "crumbs": [
      "Plugins"
    ]
  },
  {
    "objectID": "plugins.html#plugin-integration",
    "href": "plugins.html#plugin-integration",
    "title": "Plugins",
    "section": "",
    "text": "This module provides integration with the cjm-fasthtml-plugins library for extensible settings systems.\n\nUses PluginMetadata from cjm-fasthtml-plugins\nDefines PluginRegistryProtocol for registry compatibility\nApplications should use UnifiedPluginRegistry from cjm-fasthtml-plugins instead of SimplePluginRegistry\n\n\n# Cell removed - using PluginMetadata from cjm-fasthtml-plugins\n\n\n# Cell removed - PluginMetadata now imported from cjm-fasthtml-plugins\n# The imported version includes additional features:\n# - Execution mode tracking (local, cloud, subprocess, etc.)\n# - Resource management (child PIDs, containers, cloud instances)\n# - Lifecycle awareness support",
    "crumbs": [
      "Plugins"
    ]
  },
  {
    "objectID": "plugins.html#plugin-registry-protocol",
    "href": "plugins.html#plugin-registry-protocol",
    "title": "Plugins",
    "section": "Plugin Registry Protocol",
    "text": "Plugin Registry Protocol\n\nsource\n\nPluginRegistryProtocol\n\n PluginRegistryProtocol (*args, **kwargs)\n\nProtocol that plugin registries should implement.\n\n# Example: Using UnifiedPluginRegistry from cjm-fasthtml-plugins\nfrom cjm_fasthtml_plugins.core.registry import UnifiedPluginRegistry\n\n# Mock plugin manager for demonstration\nfrom dataclasses import dataclass as dc\n\n@dc\nclass MockPluginData:\n    name: str\n    version: str\n\nclass MockPluginManager:\n    def discover_plugins(self):\n        return [\n            MockPluginData(\"plugin_a\", \"1.0.0\"),\n            MockPluginData(\"plugin_b\", \"1.0.0\")\n        ]\n    def get_plugin_config_schema(self, name: str):\n        return {\n            \"type\": \"object\",\n            \"title\": f\"{name.title()} Configuration\",\n            \"properties\": {\n                \"enabled\": {\"type\": \"boolean\", \"default\": True}\n            }\n        }\n\nwith tempfile.TemporaryDirectory() as tmpdir:\n    # Create unified registry\n    registry = UnifiedPluginRegistry(config_dir=Path(tmpdir))\n    \n    # Register a plugin manager for a category\n    registry.register_plugin_manager(\n        category=\"data_processing\",\n        manager=MockPluginManager(),\n        display_name=\"Data Processing\"\n    )\n    \n    # The registry implements PluginRegistryProtocol\n    print(f\"Implements protocol: {isinstance(registry, PluginRegistryProtocol)}\")\n    print(f\"Categories: {registry.get_categories_with_plugins()}\")\n    print(f\"Plugins in category: {[p.name for p in registry.get_plugins_by_category('data_processing')]}\")\n    \n    # Get a specific plugin\n    plugin = registry.get_plugin(\"data_processing_plugin_a\")\n    print(f\"\\nPlugin metadata:\")\n    print(f\"  Name: {plugin.name}\")\n    print(f\"  Category: {plugin.category}\")\n    print(f\"  Title: {plugin.title}\")\n    print(f\"  Unique ID: {plugin.get_unique_id()}\")\n    \n    # Save and load config\n    registry.save_plugin_config(\"data_processing_plugin_a\", {\"enabled\": False})\n    loaded = registry.load_plugin_config(\"data_processing_plugin_a\")\n    print(f\"\\nSaved and loaded config: {loaded}\")\n\nImplements protocol: True\nCategories: ['data_processing']\nPlugins in category: ['plugin_a', 'plugin_b']\n\nPlugin metadata:\n  Name: plugin_a\n  Category: data_processing\n  Title: Plugin_A Configuration\n  Unique ID: data_processing_plugin_a\n\nSaved and loaded config: {'enabled': False}",
    "crumbs": [
      "Plugins"
    ]
  },
  {
    "objectID": "core/schemas.html",
    "href": "core/schemas.html",
    "title": "Schemas",
    "section": "",
    "text": "Provides a centralized place to register and access settings schemas. Supports both individual schemas and SchemaGroup objects for organizing related configurations.\nsource",
    "crumbs": [
      "core",
      "Schemas"
    ]
  },
  {
    "objectID": "core/schemas.html#module-level-registry-instance",
    "href": "core/schemas.html#module-level-registry-instance",
    "title": "Schemas",
    "section": "Module-Level Registry Instance",
    "text": "Module-Level Registry Instance",
    "crumbs": [
      "core",
      "Schemas"
    ]
  },
  {
    "objectID": "core/config.html",
    "href": "core/config.html",
    "title": "Config",
    "section": "",
    "text": "source\n\nget_app_config_schema\n\n get_app_config_schema (app_title:str='FastHTML Application',\n                        config_dir:str='configs', server_port:int=5000,\n                        themes_enum:Optional[List[str]]=None,\n                        themes_enum_names:Optional[List[str]]=None,\n                        default_theme:Optional[str]=None,\n                        include_theme:bool=True, **extra_properties)\n\nGenerate a customizable application configuration schema.\n\n\n\n\n\n\n\n\n\n\nType\nDefault\nDetails\n\n\n\n\napp_title\nstr\nFastHTML Application\nDefault application title\n\n\nconfig_dir\nstr\nconfigs\nDefault configuration directory\n\n\nserver_port\nint\n5000\nDefault server port\n\n\nthemes_enum\nOptional\nNone\nOptional list of theme values\n\n\nthemes_enum_names\nOptional\nNone\nOptional list of theme display names\n\n\ndefault_theme\nOptional\nNone\nDefault theme value\n\n\ninclude_theme\nbool\nTrue\nWhether to include theme selection\n\n\nextra_properties\nVAR_KEYWORD\n\n\n\n\nReturns\nDict\n\nJSON Schema for application configuration\n\n\n\n\n# Example: Create a basic app config schema\nbasic_schema = get_app_config_schema(\n    app_title=\"My FastHTML App\",\n    server_port=5001,\n    include_theme=False\n)\n\nprint(f\"Schema name: {basic_schema['name']}\")\nprint(f\"Schema title: {basic_schema['title']}\")\nprint(f\"Default app_title: {basic_schema['properties']['app_title']['default']}\")\nprint(f\"Default server_port: {basic_schema['properties']['server_port']['default']}\")\nprint(f\"Has theme property: {'theme' in basic_schema['properties']}\")\n\nSchema name: general\nSchema title: Application Configuration\nDefault app_title: My FastHTML App\nDefault server_port: 5001\nHas theme property: False\n\n\n\n# Example: Create schema with DaisyUI themes\ntry:\n    from cjm_fasthtml_daisyui.core.themes import DaisyUITheme\n    \n    theme_schema = get_app_config_schema(\n        app_title=\"My Themed App\",\n        themes_enum=[theme.value for theme in DaisyUITheme],\n        themes_enum_names=[theme.value.title() for theme in DaisyUITheme],\n        default_theme=DaisyUITheme.LIGHT.value,\n        include_theme=True\n    )\n    \n    print(f\"Has theme property: {'theme' in theme_schema['properties']}\")\n    print(f\"Default theme: {theme_schema['properties']['theme']['default']}\")\n    print(f\"Has onclick_save: {'onclick_save' in theme_schema}\")\nexcept ImportError:\n    print(\"cjm_fasthtml_daisyui not available - skipping theme example\")\n\nHas theme property: True\nDefault theme: light\nHas onclick_save: True",
    "crumbs": [
      "core",
      "Config"
    ]
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "cjm-fasthtml-settings",
    "section": "",
    "text": "pip install cjm_fasthtml_settings",
    "crumbs": [
      "cjm-fasthtml-settings"
    ]
  },
  {
    "objectID": "index.html#install",
    "href": "index.html#install",
    "title": "cjm-fasthtml-settings",
    "section": "",
    "text": "pip install cjm_fasthtml_settings",
    "crumbs": [
      "cjm-fasthtml-settings"
    ]
  },
  {
    "objectID": "index.html#project-structure",
    "href": "index.html#project-structure",
    "title": "cjm-fasthtml-settings",
    "section": "Project Structure",
    "text": "Project Structure\nnbs/\n├── components/ (2)\n│   ├── forms.ipynb                  # Form generation components for settings interfaces\n│   └── master_detail_adapter.ipynb  # Adapter for integrating cjm-fasthtml-interactions MasterDetail pattern into settings\n├── core/ (5)\n│   ├── config.ipynb        # Configuration constants, directory management, and base application schema\n│   ├── html_ids.ipynb      # Centralized HTML ID constants for settings components\n│   ├── schema_group.ipynb  # Grouping related configuration schemas for better organization\n│   ├── schemas.ipynb       # Schema registry and management for settings\n│   └── utils.ipynb         # Configuration loading, saving, and conversion utilities\n├── plugins.ipynb  # Optional plugin integration for extensible settings systems\n└── routes.ipynb   # FastHTML route handlers for settings interface\nTotal: 9 notebooks across 2 directories",
    "crumbs": [
      "cjm-fasthtml-settings"
    ]
  },
  {
    "objectID": "index.html#module-dependencies",
    "href": "index.html#module-dependencies",
    "title": "cjm-fasthtml-settings",
    "section": "Module Dependencies",
    "text": "Module Dependencies\ngraph LR\n    components_forms[components.forms&lt;br/&gt;Forms]\n    components_master_detail_adapter[components.master_detail_adapter&lt;br/&gt;Master-Detail Adapter]\n    core_config[core.config&lt;br/&gt;Config]\n    core_html_ids[core.html_ids&lt;br/&gt;HTML IDs]\n    core_schema_group[core.schema_group&lt;br/&gt;Schema Group]\n    core_schemas[core.schemas&lt;br/&gt;Schemas]\n    core_utils[core.utils&lt;br/&gt;Utils]\n    plugins[plugins&lt;br/&gt;Plugins]\n    routes[routes&lt;br/&gt;Routes]\n\n    components_forms --&gt; core_html_ids\n    components_forms --&gt; core_config\n    components_forms --&gt; core_utils\n    components_master_detail_adapter --&gt; core_config\n    components_master_detail_adapter --&gt; components_forms\n    components_master_detail_adapter --&gt; core_utils\n    components_master_detail_adapter --&gt; core_schemas\n    core_schemas --&gt; core_schemas\n    core_schemas --&gt; core_config\n    core_schemas --&gt; core_schema_group\n    core_utils --&gt; core_config\n    routes --&gt; core_utils\n    routes --&gt; core_html_ids\n    routes --&gt; core_config\n    routes --&gt; components_forms\n    routes --&gt; routes\n    routes --&gt; core_schemas\n17 cross-module dependencies detected",
    "crumbs": [
      "cjm-fasthtml-settings"
    ]
  },
  {
    "objectID": "index.html#cli-reference",
    "href": "index.html#cli-reference",
    "title": "cjm-fasthtml-settings",
    "section": "CLI Reference",
    "text": "CLI Reference\nNo CLI commands found in this project.",
    "crumbs": [
      "cjm-fasthtml-settings"
    ]
  },
  {
    "objectID": "index.html#module-overview",
    "href": "index.html#module-overview",
    "title": "cjm-fasthtml-settings",
    "section": "Module Overview",
    "text": "Module Overview\nDetailed documentation for each module in the project:\n\nConfig (config.ipynb)\n\nConfiguration constants, directory management, and base application schema\n\n\nImport\nfrom cjm_fasthtml_settings.core.config import (\n    DEFAULT_CONFIG_DIR,\n    get_app_config_schema\n)\n\n\nFunctions\ndef get_app_config_schema(\n    app_title: str = \"FastHTML Application\",  # Default application title\n    config_dir: str = \"configs\",  # Default configuration directory\n    server_port: int = 5000,  # Default server port\n    themes_enum: Optional[List[str]] = None,  # Optional list of theme values\n    themes_enum_names: Optional[List[str]] = None,  # Optional list of theme display names\n    default_theme: Optional[str] = None,  # Default theme value\n    include_theme: bool = True,  # Whether to include theme selection\n    **extra_properties  # Additional custom properties to add to the schema\n) -&gt; Dict[str, Any]:  # JSON Schema for application configuration\n    \"Generate a customizable application configuration schema.\"\n\n\nVariables\nDEFAULT_CONFIG_DIR\n\n\n\nForms (forms.ipynb)\n\nForm generation components for settings interfaces\n\n\nImport\nfrom cjm_fasthtml_settings.components.forms import (\n    create_settings_form,\n    create_settings_form_container\n)\n\n\nFunctions\ndef create_settings_form(\n    schema: Dict[str, Any],  # JSON schema for the form\n    values: Dict[str, Any],  # Current values for the form fields\n    post_url: str,  # URL for form submission\n    reset_url: str,  # URL for resetting form to defaults\n    target_id: str = None  # HTML ID of target container (defaults to SETTINGS_CONTENT)\n) -&gt; FT:  # Form element with settings and action buttons\n    \"Create a settings form with action buttons.\"\ndef create_settings_form_container(\n    schema: Dict[str, Any],  # JSON schema for the form\n    values: Dict[str, Any],  # Current values for the form fields\n    post_url: str,  # URL for form submission\n    reset_url: str,  # URL for resetting form to defaults\n    alert_message: Optional[Any] = None,  # Optional alert element to display\n    use_alert_container: bool = False,  # If True, add empty alert-container div\n    target_id: str = None  # HTML ID of target container (defaults to SETTINGS_CONTENT)\n) -&gt; FT:  # Div containing the alert (if any) and the settings form\n    \"Create a container with optional alert and settings form.\"\n\n\n\nHTML IDs (html_ids.ipynb)\n\nCentralized HTML ID constants for settings components\n\n\nImport\nfrom cjm_fasthtml_settings.core.html_ids import (\n    SettingsHtmlIds\n)\n\n\nClasses\nclass SettingsHtmlIds(AppHtmlIds):\n    \"HTML ID constants for settings components.\"\n    \n    def menu_item(\n            name: str  # Settings name\n        ) -&gt; str:  # Menu item ID\n        \"Generate a menu item ID for a given settings name.\"\n\n\n\nMaster-Detail Adapter (master_detail_adapter.ipynb)\n\nAdapter for integrating cjm-fasthtml-interactions MasterDetail pattern into settings\n\n\nImport\nfrom cjm_fasthtml_settings.components.master_detail_adapter import (\n    create_settings_detail_renderer,\n    create_settings_data_loader,\n    is_schema_configured,\n    create_settings_master_detail\n)\n\n\nFunctions\ndef create_settings_detail_renderer(\n    config_dir: Path,  # Configuration directory\n    save_route_fn: callable,  # Function that returns save route URL for schema_id\n    reset_route_fn: callable  # Function that returns reset route URL for schema_id\n) -&gt; callable:  # Render function for detail view\n    \"\"\"\n    Create a render function for settings detail view.\n    \n    This creates a closure that captures the config_dir and route functions,\n    returning a render function compatible with DetailItem.\n    \"\"\"\ndef create_settings_data_loader(\n    schema: Dict,  # JSON schema\n    schema_id: str  # Schema identifier\n) -&gt; callable:  # Data loader function\n    \"Create a data loader that provides schema information.\"\ndef is_schema_configured(\n    schema_id: str,  # Schema identifier\n    config_dir: Path  # Configuration directory\n) -&gt; bool:  # True if config file exists\n    \"Check if a schema has been configured.\"\ndef create_settings_master_detail(\n    schemas: Dict,  # All registered schemas (from registry.get_all())\n    config_dir: Path,  # Configuration directory\n    save_route_fn: callable,  # Function that returns save route URL for schema_id\n    reset_route_fn: callable,  # Function that returns reset route URL for schema_id\n    default_schema: str = \"general\",  # Default schema to show\n    menu_section_title: str = \"Settings\",  # Title for master list\n    plugin_registry: Optional[Any] = None,  # Optional plugin registry\n    plugin_save_route_fn: Optional[callable] = None,  # Function that returns save route URL for plugin_id\n    plugin_reset_route_fn: Optional[callable] = None  # Function that returns reset route URL for plugin_id\n) -&gt; MasterDetail:  # Configured MasterDetail instance\n    \"\"\"\n    Create a MasterDetail instance configured for settings.\n    \n    This adapter function transforms the settings schema structure into\n    DetailItem and DetailItemGroup objects compatible with MasterDetail.\n    \"\"\"\n\n\n\nPlugins (plugins.ipynb)\n\nOptional plugin integration for extensible settings systems\n\n\nImport\nfrom cjm_fasthtml_settings.plugins import (\n    PluginRegistryProtocol\n)\n\n\nClasses\n@runtime_checkable\nclass PluginRegistryProtocol(Protocol):\n    \"Protocol that plugin registries should implement.\"\n    \n    def get_plugin(\n            self, \n            unique_id: str  # Plugin unique ID\n        ) -&gt; Optional[PluginMetadata]:  # Plugin metadata or None\n        \"Get plugin metadata by unique ID.\"\n    \n    def get_plugins_by_category(\n            self, \n            category: str  # Category name\n        ) -&gt; list[PluginMetadata]:  # List of plugins in category\n        \"Get all plugins in a category.\"\n    \n    def get_categories_with_plugins(\n            self\n        ) -&gt; list[str]:  # List of category names\n        \"Get all categories that have registered plugins.\"\n    \n    def load_plugin_config(\n            self, \n            unique_id: str  # Plugin unique ID\n        ) -&gt; Dict[str, Any]:  # Loaded configuration\n        \"Load saved configuration for a plugin.\"\n    \n    def save_plugin_config(\n            self, \n            unique_id: str,  # Plugin unique ID\n            config: Dict[str, Any]  # Configuration to save\n        ) -&gt; bool:  # True if save succeeded\n        \"Save configuration for a plugin.\"\n\n\n\nRoutes (routes.ipynb)\n\nFastHTML route handlers for settings interface\n\n\nImport\nfrom cjm_fasthtml_settings.routes import (\n    config,\n    settings_ar,\n    RoutesConfig,\n    configure_settings,\n    index,\n    save,\n    reset,\n    plugin_reset,\n    plugin_save\n)\n\n\nFunctions\ndef configure_settings(\n    config_dir: Path = None,  # Directory for storing configuration files\n    wrap_with_layout: Callable = None,  # Function to wrap full page content with app layout\n    plugin_registry = None,  # Optional plugin registry (must implement PluginRegistryProtocol)\n    default_schema: str = \"general\",  # Default schema to display\n    menu_section_title: str = \"Settings\"  # Title for the settings menu section\n) -&gt; RoutesConfig:  # Configured RoutesConfig instance\n    \"Configure the settings system with a single function call.\"\ndef _resolve_schema(\n    id: str  # Schema ID\n) -&gt; tuple:  # (schema, error_message)\n    \"Resolve schema from ID using the registry.\"\n@settings_ar\ndef index(\n    request,  # FastHTML request object\n    id: str = None  # Schema ID to display (defaults to config.default_schema)\n) -&gt; FT:  # Settings page content\n    \"Main settings page.\"\n@settings_ar\nasync def save(\n    request,  # FastHTML request object\n    id: str  # Schema ID to save\n) -&gt; FT:  # Response with form or error\n    \"Save configuration handler.\"\n@settings_ar\ndef reset(\n    id: str  # Schema ID to reset\n) -&gt; FT:  # Response with form or error\n    \"Reset configuration to defaults handler.\"\n@settings_ar\ndef plugin_reset(\n    id: str  # Plugin unique ID\n) -&gt; FT:  # Response with form or error\n    \"Reset plugin configuration to defaults handler.\"\n@settings_ar\nasync def plugin_save(\n    request,  # FastHTML request object\n    id: str  # Plugin unique ID\n) -&gt; FT:  # Response with form or error\n    \"Save plugin configuration handler.\"\n\n\nClasses\nclass RoutesConfig:\n    \"Configuration for settings routes behavior.\"\n\n\n\nSchema Group (schema_group.ipynb)\n\nGrouping related configuration schemas for better organization\n\n\nImport\nfrom cjm_fasthtml_settings.core.schema_group import (\n    SchemaGroup\n)\n\n\nClasses\n@dataclass\nclass SchemaGroup:\n    \"A group of related configuration schemas.\"\n    \n    name: str\n    title: str\n    schemas: Dict[str, Dict[str, Any]]\n    icon: Optional[Any]\n    default_open: bool = True\n    description: Optional[str]\n    \n    def get_schema(\n            self, \n            schema_name: str  # Schema name\n        ) -&gt; Optional[Dict[str, Any]]:  # Schema dictionary or None\n        \"Get a specific schema from the group by name.\"\n    \n    def get_unique_id(\n            self, \n            schema_name: str  # Schema name\n        ) -&gt; str:  # Unique ID in format: {group_name}_{schema_name}\n        \"Generate a unique ID for a schema within this group.\"\n    \n    def has_configured_schemas(\n            self,\n            config_dir: Path  # Directory where config files are stored\n        ) -&gt; bool:  # True if any schema in group has saved config\n        \"Check if any schemas in this group have saved configurations.\"\n    \n    def get_configured_schemas(\n            self,\n            config_dir: Path  # Directory where config files are stored\n        ) -&gt; list:  # List of schema names that have saved configs\n        \"Get list of configured schema names in this group.\"\n\n\n\nSchemas (schemas.ipynb)\n\nSchema registry and management for settings\n\n\nImport\nfrom cjm_fasthtml_settings.core.schemas import (\n    registry,\n    SettingsRegistry\n)\n\n\nClasses\nclass SettingsRegistry:\n    def __init__(self):\n        self._schemas: Dict[str, Union[Dict[str, Any], 'SchemaGroup']] = {}\n    \"Registry for managing settings schemas and schema groups.\"\n    \n    def __init__(self):\n            self._schemas: Dict[str, Union[Dict[str, Any], 'SchemaGroup']] = {}\n    \n    def register(\n            self,\n            schema: Union[Dict[str, Any], 'SchemaGroup'],  # Schema or SchemaGroup to register\n            name: Optional[str] = None  # Optional name override\n        )\n        \"Register a settings schema or schema group.\"\n    \n    def get(\n            self,\n            name: str  # Name of the schema/group to retrieve\n        ) -&gt; Optional[Union[Dict[str, Any], 'SchemaGroup']]:  # The schema/group, or None if not found\n        \"Get a registered schema or group by name.\"\n    \n    def list_schemas(\n            self\n        ) -&gt; list:  # List of registered schema/group names\n        \"List all registered schema and group names.\"\n    \n    def get_all(\n            self\n        ) -&gt; Dict[str, Union[Dict[str, Any], 'SchemaGroup']]:  # All schemas and groups\n        \"Get all registered schemas and groups.\"\n    \n    def resolve_schema(\n            self,\n            id: str  # Schema ID (can be 'name' or 'group_schema' format)\n        ) -&gt; tuple:  # (schema_dict, error_message)\n        \"Resolve a schema ID to a schema dictionary.\"\n\n\n\nUtils (utils.ipynb)\n\nConfiguration loading, saving, and conversion utilities\n\n\nImport\nfrom cjm_fasthtml_settings.core.utils import (\n    load_config,\n    save_config,\n    get_default_values_from_schema,\n    get_config_with_defaults,\n    convert_form_data_to_config\n)\n\n\nFunctions\ndef load_config(\n    schema_name: str,  # Name of the schema/configuration to load\n    config_dir: Optional[Path] = None  # Directory where config files are stored\n) -&gt; Dict[str, Any]:  # Loaded configuration dictionary (empty dict if file doesn't exist)\n    \"Load saved configuration for a schema.\"\ndef save_config(\n    schema_name: str,  # Name of the schema/configuration to save\n    config: Dict[str, Any],  # Configuration dictionary to save\n    config_dir: Optional[Path] = None  # Directory where config files are stored\n) -&gt; bool:  # True if save succeeded, False otherwise\n    \"Save configuration for a schema.\"\ndef get_default_values_from_schema(\n    schema: Dict[str, Any]  # JSON Schema dictionary\n) -&gt; Dict[str, Any]:  # Dictionary of default values extracted from schema\n    \"Extract default values from a JSON schema.\"\ndef get_config_with_defaults(\n    schema_name: str,  # Name of the schema (or unique_id for grouped schemas)\n    schema: Dict[str, Any],  # JSON Schema dictionary\n    config_dir: Optional[Path] = None  # Directory where config files are stored\n) -&gt; Dict[str, Any]:  # Merged configuration with defaults and saved values\n    \"Get configuration with defaults merged with saved values.\"\ndef convert_form_data_to_config(\n    form_data: dict,  # Raw form data from request\n    schema: Dict[str, Any]  # JSON Schema for type conversion\n) -&gt; dict:  # Converted configuration dictionary\n    \"Convert form data to configuration dict based on schema.\"",
    "crumbs": [
      "cjm-fasthtml-settings"
    ]
  },
  {
    "objectID": "components/forms.html",
    "href": "components/forms.html",
    "title": "Forms",
    "section": "",
    "text": "source\n\n\n\n create_settings_form (schema:Dict[str,Any], values:Dict[str,Any],\n                       post_url:str, reset_url:str, target_id:str=None)\n\nCreate a settings form with action buttons.\n\n\n\n\n\n\n\n\n\n\nType\nDefault\nDetails\n\n\n\n\nschema\nDict\n\nJSON schema for the form\n\n\nvalues\nDict\n\nCurrent values for the form fields\n\n\npost_url\nstr\n\nURL for form submission\n\n\nreset_url\nstr\n\nURL for resetting form to defaults\n\n\ntarget_id\nstr\nNone\nHTML ID of target container (defaults to SETTINGS_CONTENT)\n\n\nReturns\nFT\n\nForm element with settings and action buttons\n\n\n\n\n# Example: Create a settings form\nfrom cjm_fasthtml_settings.core.config import get_app_config_schema\nfrom cjm_fasthtml_settings.core.utils import get_default_values_from_schema\n\nschema = get_app_config_schema(app_title=\"Test App\", include_theme=False)\nvalues = get_default_values_from_schema(schema)\n\nform = create_settings_form(\n    schema=schema,\n    values=values,\n    post_url=\"/settings/save/general\",\n    reset_url=\"/settings/reset/general\"\n)\n\nform\n\n&lt;form enctype=\"multipart/form-data\" hx-post=\"/settings/save/general\" hx-swap=\"innerHTML\" hx-target=\"#settings-content\"&gt;  &lt;div class=\"card bg-base-100 shadow-lg w-full max-w-4xl\"&gt;\n    &lt;div class=\"card-body\"&gt;\n      &lt;h2 class=\"card-title\"&gt;Application Configuration&lt;/h2&gt;\n      &lt;div class=\"text-base-content text-sm mb-6\"&gt;General application settings and configuration&lt;/div&gt;\n      &lt;div class=\"font-semibold text-base-content mb-3\"&gt;Required Fields&lt;/div&gt;\n      &lt;div class=\"mb-4\"&gt;\n&lt;label class=\"label mb-1\"&gt;&lt;span class=\"font-medium text-base-content\"&gt;App Title&lt;/span&gt;&lt;span class=\"text-error font-bold\"&gt; *&lt;/span&gt;&lt;/label&gt;        &lt;input type=\"text\" name=\"app_title\" value=\"Test App\" placeholder=\"Default: Test App\" required minlength=\"1\" maxlength=\"100\" id=\"field-app_title\" class=\"input input-md w-full\"&gt;\n        &lt;p class=\"text-sm text-base-content mt-1 mb-2\"&gt;Title displayed in the navbar and browser tab&lt;/p&gt;\n      &lt;/div&gt;\n      &lt;div class=\"mb-4\"&gt;\n&lt;label class=\"label mb-1\"&gt;&lt;span class=\"font-medium text-base-content\"&gt;Config Dir&lt;/span&gt;&lt;span class=\"text-error font-bold\"&gt; *&lt;/span&gt;&lt;/label&gt;        &lt;input type=\"text\" name=\"config_dir\" value=\"configs\" placeholder=\"Default: configs\" required pattern='^[^&lt;&gt;:\"\\|?*]+$' id=\"field-config_dir\" class=\"input input-md w-full validator\"&gt;\n        &lt;p class=\"text-sm text-base-content mt-1 mb-2\"&gt;Directory where configuration files are stored&lt;/p&gt;\n      &lt;/div&gt;\n&lt;hr class=\"my-6\"&gt;      &lt;div class=\"font-semibold text-base-content mb-3\"&gt;Optional Fields&lt;/div&gt;\n      &lt;div class=\"mb-4\"&gt;\n&lt;label class=\"label flex items-center cursor-pointer\"&gt;          &lt;input type=\"checkbox\" name=\"auto_open_browser\" checked id=\"field-auto_open_browser\" class=\"toggle toggle-primary\"&gt;\n&lt;span class=\"font-medium text-base-content ml-2\"&gt;Auto Open Browser&lt;/span&gt;&lt;/label&gt;        &lt;p class=\"text-sm text-base-content mt-1 mb-2\"&gt;Automatically open browser when starting the application&lt;/p&gt;\n      &lt;/div&gt;\n      &lt;div class=\"mb-4\"&gt;\n&lt;label class=\"label flex items-center cursor-pointer\"&gt;          &lt;input type=\"checkbox\" name=\"debug_mode\" id=\"field-debug_mode\" class=\"toggle toggle-primary\"&gt;\n&lt;span class=\"font-medium text-base-content ml-2\"&gt;Debug Mode&lt;/span&gt;&lt;/label&gt;        &lt;p class=\"text-sm text-base-content mt-1 mb-2\"&gt;Enable debug mode for development&lt;/p&gt;\n      &lt;/div&gt;\n      &lt;div class=\"mb-4\"&gt;\n        &lt;div class=\"w-full\"&gt;\n&lt;label class=\"label mb-1\"&gt;&lt;span class=\"font-medium text-base-content\"&gt;Max Upload Size Mb&lt;/span&gt;&lt;/label&gt;&lt;span class=\"text-xs text-base-content ml-2\"&gt;Min: 1 • Max: 10240&lt;/span&gt;        &lt;/div&gt;\n        &lt;input type=\"number\" name=\"max_upload_size_mb\" value=\"100\" min=\"1\" max=\"10240\" step=\"any\" id=\"field-max_upload_size_mb\" class=\"input input-md w-full\"&gt;\n        &lt;p class=\"text-sm text-base-content mt-1 mb-2\"&gt;Maximum file upload size in megabytes&lt;/p&gt;\n      &lt;/div&gt;\n      &lt;div class=\"mb-4\"&gt;\n&lt;label class=\"label flex items-center cursor-pointer\"&gt;          &lt;input type=\"checkbox\" name=\"reload_on_change\" id=\"field-reload_on_change\" class=\"toggle toggle-primary\"&gt;\n&lt;span class=\"font-medium text-base-content ml-2\"&gt;Reload On Change&lt;/span&gt;&lt;/label&gt;        &lt;p class=\"text-sm text-base-content mt-1 mb-2\"&gt;Automatically reload the application when files change (development only)&lt;/p&gt;\n      &lt;/div&gt;\n      &lt;div class=\"mb-4\"&gt;\n&lt;label class=\"label mb-1\"&gt;&lt;span class=\"font-medium text-base-content\"&gt;Server Host&lt;/span&gt;&lt;/label&gt;&lt;select name=\"server_host\" id=\"field-server_host\" class=\"select select-md w-full\"&gt;&lt;option&gt;Select an option...&lt;/option&gt;&lt;option value=\"0.0.0.0\" selected&gt;0.0.0.0&lt;/option&gt;&lt;option value=\"127.0.0.1\"&gt;127.0.0.1&lt;/option&gt;&lt;option value=\"localhost\"&gt;localhost&lt;/option&gt;&lt;/select&gt;        &lt;p class=\"text-sm text-base-content mt-1 mb-2\"&gt;Host address for the web server&lt;/p&gt;\n      &lt;/div&gt;\n      &lt;div class=\"mb-4\"&gt;\n        &lt;div class=\"w-full\"&gt;\n&lt;label class=\"label mb-1\"&gt;&lt;span class=\"font-medium text-base-content\"&gt;Server Port&lt;/span&gt;&lt;/label&gt;&lt;span class=\"text-xs text-base-content ml-2\"&gt;Min: 1024 • Max: 65535&lt;/span&gt;        &lt;/div&gt;\n        &lt;input type=\"number\" name=\"server_port\" value=\"5000\" min=\"1024\" max=\"65535\" step=\"1\" id=\"field-server_port\" class=\"input input-md w-full\"&gt;\n        &lt;p class=\"text-sm text-base-content mt-1 mb-2\"&gt;Port number for the web server&lt;/p&gt;\n      &lt;/div&gt;\n      &lt;div class=\"mb-4\"&gt;\n        &lt;div class=\"w-full\"&gt;\n&lt;label class=\"label mb-1\"&gt;&lt;span class=\"font-medium text-base-content\"&gt;Session Timeout Minutes&lt;/span&gt;&lt;/label&gt;&lt;span class=\"text-xs text-base-content ml-2\"&gt;Min: 0 • Max: 1440&lt;/span&gt;        &lt;/div&gt;\n        &lt;input type=\"number\" name=\"session_timeout_minutes\" value=\"60\" min=\"0\" max=\"1440\" step=\"1\" id=\"field-session_timeout_minutes\" class=\"input input-md w-full\"&gt;\n        &lt;p class=\"text-sm text-base-content mt-1 mb-2\"&gt;Session timeout in minutes (0 for no timeout)&lt;/p&gt;\n      &lt;/div&gt;\n    &lt;/div&gt;\n  &lt;/div&gt;\n  &lt;div class=\"card-actions mt-6 border-base-300\"&gt;\n&lt;button type=\"submit\" class=\"btn btn-primary\"&gt;Save Configuration&lt;/button&gt;&lt;button type=\"button\" hx-get=\"/settings/reset/general\" hx-swap=\"innerHTML\" hx-target=\"#settings-content\" class=\"btn btn-ghost ml-2\"&gt;Reset to Defaults&lt;/button&gt;  &lt;/div&gt;\n&lt;/form&gt;",
    "crumbs": [
      "components",
      "Forms"
    ]
  },
  {
    "objectID": "components/forms.html#settings-form",
    "href": "components/forms.html#settings-form",
    "title": "Forms",
    "section": "",
    "text": "source\n\n\n\n create_settings_form (schema:Dict[str,Any], values:Dict[str,Any],\n                       post_url:str, reset_url:str, target_id:str=None)\n\nCreate a settings form with action buttons.\n\n\n\n\n\n\n\n\n\n\nType\nDefault\nDetails\n\n\n\n\nschema\nDict\n\nJSON schema for the form\n\n\nvalues\nDict\n\nCurrent values for the form fields\n\n\npost_url\nstr\n\nURL for form submission\n\n\nreset_url\nstr\n\nURL for resetting form to defaults\n\n\ntarget_id\nstr\nNone\nHTML ID of target container (defaults to SETTINGS_CONTENT)\n\n\nReturns\nFT\n\nForm element with settings and action buttons\n\n\n\n\n# Example: Create a settings form\nfrom cjm_fasthtml_settings.core.config import get_app_config_schema\nfrom cjm_fasthtml_settings.core.utils import get_default_values_from_schema\n\nschema = get_app_config_schema(app_title=\"Test App\", include_theme=False)\nvalues = get_default_values_from_schema(schema)\n\nform = create_settings_form(\n    schema=schema,\n    values=values,\n    post_url=\"/settings/save/general\",\n    reset_url=\"/settings/reset/general\"\n)\n\nform\n\n&lt;form enctype=\"multipart/form-data\" hx-post=\"/settings/save/general\" hx-swap=\"innerHTML\" hx-target=\"#settings-content\"&gt;  &lt;div class=\"card bg-base-100 shadow-lg w-full max-w-4xl\"&gt;\n    &lt;div class=\"card-body\"&gt;\n      &lt;h2 class=\"card-title\"&gt;Application Configuration&lt;/h2&gt;\n      &lt;div class=\"text-base-content text-sm mb-6\"&gt;General application settings and configuration&lt;/div&gt;\n      &lt;div class=\"font-semibold text-base-content mb-3\"&gt;Required Fields&lt;/div&gt;\n      &lt;div class=\"mb-4\"&gt;\n&lt;label class=\"label mb-1\"&gt;&lt;span class=\"font-medium text-base-content\"&gt;App Title&lt;/span&gt;&lt;span class=\"text-error font-bold\"&gt; *&lt;/span&gt;&lt;/label&gt;        &lt;input type=\"text\" name=\"app_title\" value=\"Test App\" placeholder=\"Default: Test App\" required minlength=\"1\" maxlength=\"100\" id=\"field-app_title\" class=\"input input-md w-full\"&gt;\n        &lt;p class=\"text-sm text-base-content mt-1 mb-2\"&gt;Title displayed in the navbar and browser tab&lt;/p&gt;\n      &lt;/div&gt;\n      &lt;div class=\"mb-4\"&gt;\n&lt;label class=\"label mb-1\"&gt;&lt;span class=\"font-medium text-base-content\"&gt;Config Dir&lt;/span&gt;&lt;span class=\"text-error font-bold\"&gt; *&lt;/span&gt;&lt;/label&gt;        &lt;input type=\"text\" name=\"config_dir\" value=\"configs\" placeholder=\"Default: configs\" required pattern='^[^&lt;&gt;:\"\\|?*]+$' id=\"field-config_dir\" class=\"input input-md w-full validator\"&gt;\n        &lt;p class=\"text-sm text-base-content mt-1 mb-2\"&gt;Directory where configuration files are stored&lt;/p&gt;\n      &lt;/div&gt;\n&lt;hr class=\"my-6\"&gt;      &lt;div class=\"font-semibold text-base-content mb-3\"&gt;Optional Fields&lt;/div&gt;\n      &lt;div class=\"mb-4\"&gt;\n&lt;label class=\"label flex items-center cursor-pointer\"&gt;          &lt;input type=\"checkbox\" name=\"auto_open_browser\" checked id=\"field-auto_open_browser\" class=\"toggle toggle-primary\"&gt;\n&lt;span class=\"font-medium text-base-content ml-2\"&gt;Auto Open Browser&lt;/span&gt;&lt;/label&gt;        &lt;p class=\"text-sm text-base-content mt-1 mb-2\"&gt;Automatically open browser when starting the application&lt;/p&gt;\n      &lt;/div&gt;\n      &lt;div class=\"mb-4\"&gt;\n&lt;label class=\"label flex items-center cursor-pointer\"&gt;          &lt;input type=\"checkbox\" name=\"debug_mode\" id=\"field-debug_mode\" class=\"toggle toggle-primary\"&gt;\n&lt;span class=\"font-medium text-base-content ml-2\"&gt;Debug Mode&lt;/span&gt;&lt;/label&gt;        &lt;p class=\"text-sm text-base-content mt-1 mb-2\"&gt;Enable debug mode for development&lt;/p&gt;\n      &lt;/div&gt;\n      &lt;div class=\"mb-4\"&gt;\n        &lt;div class=\"w-full\"&gt;\n&lt;label class=\"label mb-1\"&gt;&lt;span class=\"font-medium text-base-content\"&gt;Max Upload Size Mb&lt;/span&gt;&lt;/label&gt;&lt;span class=\"text-xs text-base-content ml-2\"&gt;Min: 1 • Max: 10240&lt;/span&gt;        &lt;/div&gt;\n        &lt;input type=\"number\" name=\"max_upload_size_mb\" value=\"100\" min=\"1\" max=\"10240\" step=\"any\" id=\"field-max_upload_size_mb\" class=\"input input-md w-full\"&gt;\n        &lt;p class=\"text-sm text-base-content mt-1 mb-2\"&gt;Maximum file upload size in megabytes&lt;/p&gt;\n      &lt;/div&gt;\n      &lt;div class=\"mb-4\"&gt;\n&lt;label class=\"label flex items-center cursor-pointer\"&gt;          &lt;input type=\"checkbox\" name=\"reload_on_change\" id=\"field-reload_on_change\" class=\"toggle toggle-primary\"&gt;\n&lt;span class=\"font-medium text-base-content ml-2\"&gt;Reload On Change&lt;/span&gt;&lt;/label&gt;        &lt;p class=\"text-sm text-base-content mt-1 mb-2\"&gt;Automatically reload the application when files change (development only)&lt;/p&gt;\n      &lt;/div&gt;\n      &lt;div class=\"mb-4\"&gt;\n&lt;label class=\"label mb-1\"&gt;&lt;span class=\"font-medium text-base-content\"&gt;Server Host&lt;/span&gt;&lt;/label&gt;&lt;select name=\"server_host\" id=\"field-server_host\" class=\"select select-md w-full\"&gt;&lt;option&gt;Select an option...&lt;/option&gt;&lt;option value=\"0.0.0.0\" selected&gt;0.0.0.0&lt;/option&gt;&lt;option value=\"127.0.0.1\"&gt;127.0.0.1&lt;/option&gt;&lt;option value=\"localhost\"&gt;localhost&lt;/option&gt;&lt;/select&gt;        &lt;p class=\"text-sm text-base-content mt-1 mb-2\"&gt;Host address for the web server&lt;/p&gt;\n      &lt;/div&gt;\n      &lt;div class=\"mb-4\"&gt;\n        &lt;div class=\"w-full\"&gt;\n&lt;label class=\"label mb-1\"&gt;&lt;span class=\"font-medium text-base-content\"&gt;Server Port&lt;/span&gt;&lt;/label&gt;&lt;span class=\"text-xs text-base-content ml-2\"&gt;Min: 1024 • Max: 65535&lt;/span&gt;        &lt;/div&gt;\n        &lt;input type=\"number\" name=\"server_port\" value=\"5000\" min=\"1024\" max=\"65535\" step=\"1\" id=\"field-server_port\" class=\"input input-md w-full\"&gt;\n        &lt;p class=\"text-sm text-base-content mt-1 mb-2\"&gt;Port number for the web server&lt;/p&gt;\n      &lt;/div&gt;\n      &lt;div class=\"mb-4\"&gt;\n        &lt;div class=\"w-full\"&gt;\n&lt;label class=\"label mb-1\"&gt;&lt;span class=\"font-medium text-base-content\"&gt;Session Timeout Minutes&lt;/span&gt;&lt;/label&gt;&lt;span class=\"text-xs text-base-content ml-2\"&gt;Min: 0 • Max: 1440&lt;/span&gt;        &lt;/div&gt;\n        &lt;input type=\"number\" name=\"session_timeout_minutes\" value=\"60\" min=\"0\" max=\"1440\" step=\"1\" id=\"field-session_timeout_minutes\" class=\"input input-md w-full\"&gt;\n        &lt;p class=\"text-sm text-base-content mt-1 mb-2\"&gt;Session timeout in minutes (0 for no timeout)&lt;/p&gt;\n      &lt;/div&gt;\n    &lt;/div&gt;\n  &lt;/div&gt;\n  &lt;div class=\"card-actions mt-6 border-base-300\"&gt;\n&lt;button type=\"submit\" class=\"btn btn-primary\"&gt;Save Configuration&lt;/button&gt;&lt;button type=\"button\" hx-get=\"/settings/reset/general\" hx-swap=\"innerHTML\" hx-target=\"#settings-content\" class=\"btn btn-ghost ml-2\"&gt;Reset to Defaults&lt;/button&gt;  &lt;/div&gt;\n&lt;/form&gt;",
    "crumbs": [
      "components",
      "Forms"
    ]
  },
  {
    "objectID": "components/forms.html#settings-form-container",
    "href": "components/forms.html#settings-form-container",
    "title": "Forms",
    "section": "Settings Form Container",
    "text": "Settings Form Container\n\nsource\n\ncreate_settings_form_container\n\n create_settings_form_container (schema:Dict[str,Any],\n                                 values:Dict[str,Any], post_url:str,\n                                 reset_url:str,\n                                 alert_message:Optional[Any]=None,\n                                 use_alert_container:bool=False,\n                                 target_id:str=None)\n\nCreate a container with optional alert and settings form.\n\n\n\n\n\n\n\n\n\n\nType\nDefault\nDetails\n\n\n\n\nschema\nDict\n\nJSON schema for the form\n\n\nvalues\nDict\n\nCurrent values for the form fields\n\n\npost_url\nstr\n\nURL for form submission\n\n\nreset_url\nstr\n\nURL for resetting form to defaults\n\n\nalert_message\nOptional\nNone\nOptional alert element to display\n\n\nuse_alert_container\nbool\nFalse\nIf True, add empty alert-container div\n\n\ntarget_id\nstr\nNone\nHTML ID of target container (defaults to SETTINGS_CONTENT)\n\n\nReturns\nFT\n\nDiv containing the alert (if any) and the settings form\n\n\n\n\n# Example: Create form with alert container\nfrom cjm_fasthtml_settings.core.config import get_app_config_schema\nfrom cjm_fasthtml_settings.core.utils import get_default_values_from_schema\n\nschema = get_app_config_schema(app_title=\"Test App\", include_theme=False)\nvalues = get_default_values_from_schema(schema)\n\ncontainer = create_settings_form_container(\n    schema=schema,\n    values=values,\n    post_url=\"/settings/save/general\",\n    reset_url=\"/settings/reset/general\",\n    use_alert_container=True\n)\n\ncontainer\n\n&lt;div&gt;\n  &lt;div id=\"alert-container\"&gt;&lt;/div&gt;\n&lt;form enctype=\"multipart/form-data\" hx-post=\"/settings/save/general\" hx-swap=\"innerHTML\" hx-target=\"#settings-content\"&gt;    &lt;div class=\"card bg-base-100 shadow-lg w-full max-w-4xl\"&gt;\n      &lt;div class=\"card-body\"&gt;\n        &lt;h2 class=\"card-title\"&gt;Application Configuration&lt;/h2&gt;\n        &lt;div class=\"text-base-content text-sm mb-6\"&gt;General application settings and configuration&lt;/div&gt;\n        &lt;div class=\"font-semibold text-base-content mb-3\"&gt;Required Fields&lt;/div&gt;\n        &lt;div class=\"mb-4\"&gt;\n&lt;label class=\"label mb-1\"&gt;&lt;span class=\"font-medium text-base-content\"&gt;App Title&lt;/span&gt;&lt;span class=\"text-error font-bold\"&gt; *&lt;/span&gt;&lt;/label&gt;          &lt;input type=\"text\" name=\"app_title\" value=\"Test App\" placeholder=\"Default: Test App\" required minlength=\"1\" maxlength=\"100\" id=\"field-app_title\" class=\"input input-md w-full\"&gt;\n          &lt;p class=\"text-sm text-base-content mt-1 mb-2\"&gt;Title displayed in the navbar and browser tab&lt;/p&gt;\n        &lt;/div&gt;\n        &lt;div class=\"mb-4\"&gt;\n&lt;label class=\"label mb-1\"&gt;&lt;span class=\"font-medium text-base-content\"&gt;Config Dir&lt;/span&gt;&lt;span class=\"text-error font-bold\"&gt; *&lt;/span&gt;&lt;/label&gt;          &lt;input type=\"text\" name=\"config_dir\" value=\"configs\" placeholder=\"Default: configs\" required pattern='^[^&lt;&gt;:\"\\|?*]+$' id=\"field-config_dir\" class=\"input input-md w-full validator\"&gt;\n          &lt;p class=\"text-sm text-base-content mt-1 mb-2\"&gt;Directory where configuration files are stored&lt;/p&gt;\n        &lt;/div&gt;\n&lt;hr class=\"my-6\"&gt;        &lt;div class=\"font-semibold text-base-content mb-3\"&gt;Optional Fields&lt;/div&gt;\n        &lt;div class=\"mb-4\"&gt;\n&lt;label class=\"label flex items-center cursor-pointer\"&gt;            &lt;input type=\"checkbox\" name=\"auto_open_browser\" checked id=\"field-auto_open_browser\" class=\"toggle toggle-primary\"&gt;\n&lt;span class=\"font-medium text-base-content ml-2\"&gt;Auto Open Browser&lt;/span&gt;&lt;/label&gt;          &lt;p class=\"text-sm text-base-content mt-1 mb-2\"&gt;Automatically open browser when starting the application&lt;/p&gt;\n        &lt;/div&gt;\n        &lt;div class=\"mb-4\"&gt;\n&lt;label class=\"label flex items-center cursor-pointer\"&gt;            &lt;input type=\"checkbox\" name=\"debug_mode\" id=\"field-debug_mode\" class=\"toggle toggle-primary\"&gt;\n&lt;span class=\"font-medium text-base-content ml-2\"&gt;Debug Mode&lt;/span&gt;&lt;/label&gt;          &lt;p class=\"text-sm text-base-content mt-1 mb-2\"&gt;Enable debug mode for development&lt;/p&gt;\n        &lt;/div&gt;\n        &lt;div class=\"mb-4\"&gt;\n          &lt;div class=\"w-full\"&gt;\n&lt;label class=\"label mb-1\"&gt;&lt;span class=\"font-medium text-base-content\"&gt;Max Upload Size Mb&lt;/span&gt;&lt;/label&gt;&lt;span class=\"text-xs text-base-content ml-2\"&gt;Min: 1 • Max: 10240&lt;/span&gt;          &lt;/div&gt;\n          &lt;input type=\"number\" name=\"max_upload_size_mb\" value=\"100\" min=\"1\" max=\"10240\" step=\"any\" id=\"field-max_upload_size_mb\" class=\"input input-md w-full\"&gt;\n          &lt;p class=\"text-sm text-base-content mt-1 mb-2\"&gt;Maximum file upload size in megabytes&lt;/p&gt;\n        &lt;/div&gt;\n        &lt;div class=\"mb-4\"&gt;\n&lt;label class=\"label flex items-center cursor-pointer\"&gt;            &lt;input type=\"checkbox\" name=\"reload_on_change\" id=\"field-reload_on_change\" class=\"toggle toggle-primary\"&gt;\n&lt;span class=\"font-medium text-base-content ml-2\"&gt;Reload On Change&lt;/span&gt;&lt;/label&gt;          &lt;p class=\"text-sm text-base-content mt-1 mb-2\"&gt;Automatically reload the application when files change (development only)&lt;/p&gt;\n        &lt;/div&gt;\n        &lt;div class=\"mb-4\"&gt;\n&lt;label class=\"label mb-1\"&gt;&lt;span class=\"font-medium text-base-content\"&gt;Server Host&lt;/span&gt;&lt;/label&gt;&lt;select name=\"server_host\" id=\"field-server_host\" class=\"select select-md w-full\"&gt;&lt;option&gt;Select an option...&lt;/option&gt;&lt;option value=\"0.0.0.0\" selected&gt;0.0.0.0&lt;/option&gt;&lt;option value=\"127.0.0.1\"&gt;127.0.0.1&lt;/option&gt;&lt;option value=\"localhost\"&gt;localhost&lt;/option&gt;&lt;/select&gt;          &lt;p class=\"text-sm text-base-content mt-1 mb-2\"&gt;Host address for the web server&lt;/p&gt;\n        &lt;/div&gt;\n        &lt;div class=\"mb-4\"&gt;\n          &lt;div class=\"w-full\"&gt;\n&lt;label class=\"label mb-1\"&gt;&lt;span class=\"font-medium text-base-content\"&gt;Server Port&lt;/span&gt;&lt;/label&gt;&lt;span class=\"text-xs text-base-content ml-2\"&gt;Min: 1024 • Max: 65535&lt;/span&gt;          &lt;/div&gt;\n          &lt;input type=\"number\" name=\"server_port\" value=\"5000\" min=\"1024\" max=\"65535\" step=\"1\" id=\"field-server_port\" class=\"input input-md w-full\"&gt;\n          &lt;p class=\"text-sm text-base-content mt-1 mb-2\"&gt;Port number for the web server&lt;/p&gt;\n        &lt;/div&gt;\n        &lt;div class=\"mb-4\"&gt;\n          &lt;div class=\"w-full\"&gt;\n&lt;label class=\"label mb-1\"&gt;&lt;span class=\"font-medium text-base-content\"&gt;Session Timeout Minutes&lt;/span&gt;&lt;/label&gt;&lt;span class=\"text-xs text-base-content ml-2\"&gt;Min: 0 • Max: 1440&lt;/span&gt;          &lt;/div&gt;\n          &lt;input type=\"number\" name=\"session_timeout_minutes\" value=\"60\" min=\"0\" max=\"1440\" step=\"1\" id=\"field-session_timeout_minutes\" class=\"input input-md w-full\"&gt;\n          &lt;p class=\"text-sm text-base-content mt-1 mb-2\"&gt;Session timeout in minutes (0 for no timeout)&lt;/p&gt;\n        &lt;/div&gt;\n      &lt;/div&gt;\n    &lt;/div&gt;\n    &lt;div class=\"card-actions mt-6 border-base-300\"&gt;\n&lt;button type=\"submit\" class=\"btn btn-primary\"&gt;Save Configuration&lt;/button&gt;&lt;button type=\"button\" hx-get=\"/settings/reset/general\" hx-swap=\"innerHTML\" hx-target=\"#settings-content\" class=\"btn btn-ghost ml-2\"&gt;Reset to Defaults&lt;/button&gt;    &lt;/div&gt;\n&lt;/form&gt;&lt;/div&gt;",
    "crumbs": [
      "components",
      "Forms"
    ]
  },
  {
    "objectID": "routes.html",
    "href": "routes.html",
    "title": "Routes",
    "section": "",
    "text": "Module-level configuration that can be customized by users before importing the router.\n\nsource\n\n\n\n RoutesConfig ()\n\nConfiguration for settings routes behavior.\n\n\n\nThe configure_settings() function is a convenience helper that sets all configuration options at once, providing a cleaner alternative to setting config attributes individually.\nThis is the recommended way to configure the settings system before adding the router to your app.\n\nsource\n\n\n\n\n configure_settings (config_dir:pathlib.Path=None,\n                     wrap_with_layout:Callable=None, plugin_registry=None,\n                     default_schema:str='general',\n                     menu_section_title:str='Settings')\n\nConfigure the settings system with a single function call.\n\n\n\n\n\n\n\n\n\n\nType\nDefault\nDetails\n\n\n\n\nconfig_dir\nPath\nNone\nDirectory for storing configuration files\n\n\nwrap_with_layout\nCallable\nNone\nFunction to wrap full page content with app layout\n\n\nplugin_registry\nNoneType\nNone\nOptional plugin registry (must implement PluginRegistryProtocol)\n\n\ndefault_schema\nstr\ngeneral\nDefault schema to display\n\n\nmenu_section_title\nstr\nSettings\nTitle for the settings menu section\n\n\nReturns\nRoutesConfig\n\nConfigured RoutesConfig instance",
    "crumbs": [
      "Routes"
    ]
  },
  {
    "objectID": "routes.html#configuration",
    "href": "routes.html#configuration",
    "title": "Routes",
    "section": "",
    "text": "Module-level configuration that can be customized by users before importing the router.\n\nsource\n\n\n\n RoutesConfig ()\n\nConfiguration for settings routes behavior.\n\n\n\nThe configure_settings() function is a convenience helper that sets all configuration options at once, providing a cleaner alternative to setting config attributes individually.\nThis is the recommended way to configure the settings system before adding the router to your app.\n\nsource\n\n\n\n\n configure_settings (config_dir:pathlib.Path=None,\n                     wrap_with_layout:Callable=None, plugin_registry=None,\n                     default_schema:str='general',\n                     menu_section_title:str='Settings')\n\nConfigure the settings system with a single function call.\n\n\n\n\n\n\n\n\n\n\nType\nDefault\nDetails\n\n\n\n\nconfig_dir\nPath\nNone\nDirectory for storing configuration files\n\n\nwrap_with_layout\nCallable\nNone\nFunction to wrap full page content with app layout\n\n\nplugin_registry\nNoneType\nNone\nOptional plugin registry (must implement PluginRegistryProtocol)\n\n\ndefault_schema\nstr\ngeneral\nDefault schema to display\n\n\nmenu_section_title\nstr\nSettings\nTitle for the settings menu section\n\n\nReturns\nRoutesConfig\n\nConfigured RoutesConfig instance",
    "crumbs": [
      "Routes"
    ]
  },
  {
    "objectID": "routes.html#error-handling-integration",
    "href": "routes.html#error-handling-integration",
    "title": "Routes",
    "section": "Error Handling Integration",
    "text": "Error Handling Integration\nWhen the cjm-error-handling library is installed, settings routes use structured errors for better error tracking:\n\nConfigurationError: Raised for config load/save failures, missing config files, or parse errors\nValidationError: Raised for invalid configuration data or schema validation failures\n\nThese structured errors provide: - User-friendly messages for alerts - Debug information for logging - Rich context (schema_id, operation, config_path, etc.) - Error serialization for API responses\nWithout the library: Falls back to returning error alert components directly\nUsage:\ntry:\n    if save_config(schema_id, config_data, config_dir):\n        # Success\n        pass\nexcept ConfigurationError as e:\n    # Handle structured error\n    return create_error_alert(e.get_user_message())",
    "crumbs": [
      "Routes"
    ]
  },
  {
    "objectID": "routes.html#helper-functions",
    "href": "routes.html#helper-functions",
    "title": "Routes",
    "section": "Helper Functions",
    "text": "Helper Functions",
    "crumbs": [
      "Routes"
    ]
  },
  {
    "objectID": "routes.html#api-router-and-routes",
    "href": "routes.html#api-router-and-routes",
    "title": "Routes",
    "section": "API Router and Routes",
    "text": "API Router and Routes\nThe module-level settings_ar router can be directly imported and attached to your FastHTML app.\n\nsource\n\nindex\n\n index (request, id:str=None)\n\nMain settings page.\n\n\n\n\n\n\n\n\n\n\nType\nDefault\nDetails\n\n\n\n\nrequest\n\n\nFastHTML request object\n\n\nid\nstr\nNone\nSchema ID to display (defaults to config.default_schema)\n\n\nReturns\nFT\n\nSettings page content\n\n\n\n\nsource\n\n\nsave\n\n save (request, id:str)\n\nSave configuration handler.\n\n\n\n\nType\nDetails\n\n\n\n\nrequest\n\nFastHTML request object\n\n\nid\nstr\nSchema ID to save\n\n\nReturns\nFT\nResponse with form or error\n\n\n\n\nsource\n\n\nreset\n\n reset (id:str)\n\nReset configuration to defaults handler.\n\n\n\n\nType\nDetails\n\n\n\n\nid\nstr\nSchema ID to reset\n\n\nReturns\nFT\nResponse with form or error",
    "crumbs": [
      "Routes"
    ]
  },
  {
    "objectID": "routes.html#plugin-routes-optional",
    "href": "routes.html#plugin-routes-optional",
    "title": "Routes",
    "section": "Plugin Routes (Optional)",
    "text": "Plugin Routes (Optional)\nThese routes are only active if config.plugin_registry is set.\n\nsource\n\nplugin_reset\n\n plugin_reset (id:str)\n\nReset plugin configuration to defaults handler.\n\n\n\n\nType\nDetails\n\n\n\n\nid\nstr\nPlugin unique ID\n\n\nReturns\nFT\nResponse with form or error\n\n\n\n\nsource\n\n\nplugin_save\n\n plugin_save (request, id:str)\n\nSave plugin configuration handler.\n\n\n\n\nType\nDetails\n\n\n\n\nrequest\n\nFastHTML request object\n\n\nid\nstr\nPlugin unique ID\n\n\nReturns\nFT\nResponse with form or error",
    "crumbs": [
      "Routes"
    ]
  },
  {
    "objectID": "routes.html#usage-example",
    "href": "routes.html#usage-example",
    "title": "Routes",
    "section": "Usage Example",
    "text": "Usage Example\n\n# Example: Using the settings router in your app\nfrom cjm_fasthtml_settings.core.schemas import registry\nfrom cjm_fasthtml_settings.core.config import get_app_config_schema\n\n# First, register your schemas\nregistry.register(get_app_config_schema(app_title=\"My App\", include_theme=False))\nregistry.register({\n    \"name\": \"database\",\n    \"title\": \"Database Settings\",\n    \"type\": \"object\",\n    \"properties\": {\n        \"host\": {\"type\": \"string\", \"title\": \"Host\", \"default\": \"localhost\"}\n    }\n})\n\n# NEW WAY: Use the configure_settings helper (recommended)\nfrom cjm_fasthtml_settings.routes import configure_settings\nfrom pathlib import Path\n\nconfigure_settings(\n    config_dir=Path(\"my_configs\"),\n    default_schema=\"general\",\n    menu_section_title=\"Settings\"\n)\n\n# OLD WAY: Direct config attribute setting (still works)\n# from cjm_fasthtml_settings.routes import config\n# config.config_dir = Path(\"my_configs\")\n# config.default_schema = \"general\"\n\n# Then import and use the router\nfrom cjm_fasthtml_settings.routes import settings_ar, config\n\nprint(f\"Settings router prefix: {settings_ar.prefix}\")\nprint(f\"Registered schemas: {registry.list_schemas()}\")\nprint(f\"Config directory: {config.config_dir}\")\n\nSettings router prefix: /settings\nRegistered schemas: ['general', 'database']\nConfig directory: my_configs",
    "crumbs": [
      "Routes"
    ]
  },
  {
    "objectID": "components/master_detail_adapter.html",
    "href": "components/master_detail_adapter.html",
    "title": "Master-Detail Adapter",
    "section": "",
    "text": "This function renders the detail content for a settings schema using the standard settings form.\n\nsource\n\n\n\n create_settings_detail_renderer (config_dir:pathlib.Path,\n                                  save_route_fn:&lt;built-\n                                  infunctioncallable&gt;,\n                                  reset_route_fn:&lt;built-\n                                  infunctioncallable&gt;)\n\n*Create a render function for settings detail view.\nThis creates a closure that captures the config_dir and route functions, returning a render function compatible with DetailItem.*\n\n\n\n\n\n\n\n\n\nType\nDetails\n\n\n\n\nconfig_dir\nPath\nConfiguration directory\n\n\nsave_route_fn\ncallable\nFunction that returns save route URL for schema_id\n\n\nreset_route_fn\ncallable\nFunction that returns reset route URL for schema_id\n\n\nReturns\ncallable\nRender function for detail view",
    "crumbs": [
      "components",
      "Master-Detail Adapter"
    ]
  },
  {
    "objectID": "components/master_detail_adapter.html#settings-detail-renderer",
    "href": "components/master_detail_adapter.html#settings-detail-renderer",
    "title": "Master-Detail Adapter",
    "section": "",
    "text": "This function renders the detail content for a settings schema using the standard settings form.\n\nsource\n\n\n\n create_settings_detail_renderer (config_dir:pathlib.Path,\n                                  save_route_fn:&lt;built-\n                                  infunctioncallable&gt;,\n                                  reset_route_fn:&lt;built-\n                                  infunctioncallable&gt;)\n\n*Create a render function for settings detail view.\nThis creates a closure that captures the config_dir and route functions, returning a render function compatible with DetailItem.*\n\n\n\n\n\n\n\n\n\nType\nDetails\n\n\n\n\nconfig_dir\nPath\nConfiguration directory\n\n\nsave_route_fn\ncallable\nFunction that returns save route URL for schema_id\n\n\nreset_route_fn\ncallable\nFunction that returns reset route URL for schema_id\n\n\nReturns\ncallable\nRender function for detail view",
    "crumbs": [
      "components",
      "Master-Detail Adapter"
    ]
  },
  {
    "objectID": "components/master_detail_adapter.html#settings-data-loader",
    "href": "components/master_detail_adapter.html#settings-data-loader",
    "title": "Master-Detail Adapter",
    "section": "Settings Data Loader",
    "text": "Settings Data Loader\nThis function creates a data loader that provides schema information to the render function.\n\nsource\n\ncreate_settings_data_loader\n\n create_settings_data_loader (schema:Dict, schema_id:str)\n\nCreate a data loader that provides schema information.\n\n\n\n\nType\nDetails\n\n\n\n\nschema\nDict\nJSON schema\n\n\nschema_id\nstr\nSchema identifier\n\n\nReturns\ncallable\nData loader function",
    "crumbs": [
      "components",
      "Master-Detail Adapter"
    ]
  },
  {
    "objectID": "components/master_detail_adapter.html#configuration-badge-helper",
    "href": "components/master_detail_adapter.html#configuration-badge-helper",
    "title": "Master-Detail Adapter",
    "section": "Configuration Badge Helper",
    "text": "Configuration Badge Helper\nCheck if a schema has been configured (config file exists).\n\nsource\n\nis_schema_configured\n\n is_schema_configured (schema_id:str, config_dir:pathlib.Path)\n\nCheck if a schema has been configured.\n\n\n\n\nType\nDetails\n\n\n\n\nschema_id\nstr\nSchema identifier\n\n\nconfig_dir\nPath\nConfiguration directory\n\n\nReturns\nbool\nTrue if config file exists",
    "crumbs": [
      "components",
      "Master-Detail Adapter"
    ]
  },
  {
    "objectID": "components/master_detail_adapter.html#settings-master-detail-creator",
    "href": "components/master_detail_adapter.html#settings-master-detail-creator",
    "title": "Master-Detail Adapter",
    "section": "Settings Master-Detail Creator",
    "text": "Settings Master-Detail Creator\nThis is the main adapter function that creates a MasterDetail instance configured for settings.\n\nsource\n\ncreate_settings_master_detail\n\n create_settings_master_detail (schemas:Dict, config_dir:pathlib.Path,\n                                save_route_fn:&lt;built-infunctioncallable&gt;,\n                                reset_route_fn:&lt;built-infunctioncallable&gt;,\n                                default_schema:str='general',\n                                menu_section_title:str='Settings',\n                                plugin_registry:Optional[Any]=None,\n                                plugin_save_route_fn:Optional[&lt;built-\n                                infunctioncallable&gt;]=None,\n                                plugin_reset_route_fn:Optional[&lt;built-\n                                infunctioncallable&gt;]=None)\n\n*Create a MasterDetail instance configured for settings.\nThis adapter function transforms the settings schema structure into DetailItem and DetailItemGroup objects compatible with MasterDetail.*\n\n\n\n\n\n\n\n\n\n\nType\nDefault\nDetails\n\n\n\n\nschemas\nDict\n\nAll registered schemas (from registry.get_all())\n\n\nconfig_dir\nPath\n\nConfiguration directory\n\n\nsave_route_fn\ncallable\n\nFunction that returns save route URL for schema_id\n\n\nreset_route_fn\ncallable\n\nFunction that returns reset route URL for schema_id\n\n\ndefault_schema\nstr\ngeneral\nDefault schema to show\n\n\nmenu_section_title\nstr\nSettings\nTitle for master list\n\n\nplugin_registry\nOptional\nNone\nOptional plugin registry\n\n\nplugin_save_route_fn\nOptional\nNone\nFunction that returns save route URL for plugin_id\n\n\nplugin_reset_route_fn\nOptional\nNone\nFunction that returns reset route URL for plugin_id\n\n\nReturns\nMasterDetail\n\nConfigured MasterDetail instance",
    "crumbs": [
      "components",
      "Master-Detail Adapter"
    ]
  },
  {
    "objectID": "components/master_detail_adapter.html#usage-example",
    "href": "components/master_detail_adapter.html#usage-example",
    "title": "Master-Detail Adapter",
    "section": "Usage Example",
    "text": "Usage Example\n\n# Example: Create settings master-detail\nfrom pathlib import Path\nfrom cjm_fasthtml_settings.core.schemas import registry\nfrom cjm_fasthtml_settings.core.config import get_app_config_schema\n\n# Register a sample schema\nregistry.register(get_app_config_schema(app_title=\"Test App\", include_theme=False))\n\n# Create the master-detail interface\nsettings_md = create_settings_master_detail(\n    schemas=registry.get_all(),\n    config_dir=Path(\"configs\"),\n    save_route_fn=lambda id: f\"/settings/save?id={id}\",\n    reset_route_fn=lambda id: f\"/settings/reset?id={id}\",\n    default_schema=\"general\",\n    menu_section_title=\"Settings\"\n)\n\nprint(f\"Settings master-detail created with {len(settings_md.item_index)} items\")\nprint(f\"Items: {list(settings_md.item_index.keys())}\")\n\nSettings master-detail created with 1 items\nItems: ['general']",
    "crumbs": [
      "components",
      "Master-Detail Adapter"
    ]
  },
  {
    "objectID": "core/schema_group.html",
    "href": "core/schema_group.html",
    "title": "Schema Group",
    "section": "",
    "text": "Use SchemaGroup to organize multiple related schemas under a single collapsible section in the settings sidebar. This is useful for applications with many configuration options.\nAttributes: - name: Internal identifier for the group (used in unique IDs) - title: Display title shown in the sidebar - schemas: Dictionary mapping schema keys to schema definitions - icon: Optional icon/SVG element for the group - default_open: Whether the group is expanded by default - description: Optional description of the group\n\nsource\n\nSchemaGroup\n\n SchemaGroup (name:str, title:str, schemas:Dict[str,Dict[str,Any]],\n              icon:Optional[Any]=None, default_open:bool=True,\n              description:Optional[str]=None)\n\nA group of related configuration schemas.\n\n# Example: Create a schema group\ndatabase_group = SchemaGroup(\n    name=\"database\",\n    title=\"Database Settings\",\n    schemas={\n        \"connection\": {\n            \"name\": \"connection\",\n            \"title\": \"Connection Settings\",\n            \"type\": \"object\",\n            \"properties\": {\n                \"host\": {\"type\": \"string\", \"title\": \"Host\", \"default\": \"localhost\"}\n            }\n        },\n        \"performance\": {\n            \"name\": \"performance\",\n            \"title\": \"Performance Settings\",\n            \"type\": \"object\",\n            \"properties\": {\n                \"pool_size\": {\"type\": \"integer\", \"title\": \"Pool Size\", \"default\": 10}\n            }\n        }\n    },\n    default_open=True,\n    description=\"Configure database connection and performance\"\n)\n\nprint(f\"Group name: {database_group.name}\")\nprint(f\"Group title: {database_group.title}\")\nprint(f\"Unique ID for 'connection': {database_group.get_unique_id('connection')}\")\nprint(f\"Connection schema: {database_group.get_schema('connection')['title']}\")\n\nGroup name: database\nGroup title: Database Settings\nUnique ID for 'connection': database_connection\nConnection schema: Connection Settings\n\n\n\n# Example: Check for configured schemas\nimport tempfile\nimport json\n\n\ndatabase_group = SchemaGroup(\n    name=\"database\",\n    title=\"Database Settings\",\n    schemas={\n        \"connection\": {\n            \"name\": \"connection\",\n            \"title\": \"Connection Settings\",\n            \"type\": \"object\",\n            \"properties\": {\n                \"host\": {\"type\": \"string\", \"title\": \"Host\", \"default\": \"localhost\"}\n            }\n        },\n        \"performance\": {\n            \"name\": \"performance\",\n            \"title\": \"Performance Settings\",\n            \"type\": \"object\",\n            \"properties\": {\n                \"pool_size\": {\"type\": \"integer\", \"title\": \"Pool Size\", \"default\": 10}\n            }\n        }\n    },\n    default_open=True,\n    description=\"Configure database connection and performance\"\n)\n\n# Create a temporary config directory\nwith tempfile.TemporaryDirectory() as tmpdir:\n    config_dir = Path(tmpdir)\n    \n    # Initially, no schemas are configured\n    print(f\"Has configured schemas (before): {database_group.has_configured_schemas(config_dir)}\")\n    \n    # Save a config file for one schema\n    config_file = config_dir / \"database_connection.json\"\n    with open(config_file, 'w') as f:\n        json.dump({\"host\": \"prod.example.com\"}, f)\n    \n    # Now it should detect configured schemas\n    print(f\"Has configured schemas (after): {database_group.has_configured_schemas(config_dir)}\")\n    print(f\"Configured schemas: {database_group.get_configured_schemas(config_dir)}\")\n\nHas configured schemas (before): False\nHas configured schemas (after): True\nConfigured schemas: ['connection']",
    "crumbs": [
      "core",
      "Schema Group"
    ]
  },
  {
    "objectID": "core/utils.html",
    "href": "core/utils.html",
    "title": "Utils",
    "section": "",
    "text": "source\n\n\n\n load_config (schema_name:str, config_dir:Optional[pathlib.Path]=None)\n\nLoad saved configuration for a schema.\n\n\n\n\n\n\n\n\n\n\nType\nDefault\nDetails\n\n\n\n\nschema_name\nstr\n\nName of the schema/configuration to load\n\n\nconfig_dir\nOptional\nNone\nDirectory where config files are stored\n\n\nReturns\nDict\n\nLoaded configuration dictionary (empty dict if file doesn’t exist)\n\n\n\n\nsource\n\n\n\n\n save_config (schema_name:str, config:Dict[str,Any],\n              config_dir:Optional[pathlib.Path]=None)\n\nSave configuration for a schema.\n\n\n\n\n\n\n\n\n\n\nType\nDefault\nDetails\n\n\n\n\nschema_name\nstr\n\nName of the schema/configuration to save\n\n\nconfig\nDict\n\nConfiguration dictionary to save\n\n\nconfig_dir\nOptional\nNone\nDirectory where config files are stored\n\n\nReturns\nbool\n\nTrue if save succeeded, False otherwise",
    "crumbs": [
      "core",
      "Utils"
    ]
  },
  {
    "objectID": "core/utils.html#configuration-file-operations",
    "href": "core/utils.html#configuration-file-operations",
    "title": "Utils",
    "section": "",
    "text": "source\n\n\n\n load_config (schema_name:str, config_dir:Optional[pathlib.Path]=None)\n\nLoad saved configuration for a schema.\n\n\n\n\n\n\n\n\n\n\nType\nDefault\nDetails\n\n\n\n\nschema_name\nstr\n\nName of the schema/configuration to load\n\n\nconfig_dir\nOptional\nNone\nDirectory where config files are stored\n\n\nReturns\nDict\n\nLoaded configuration dictionary (empty dict if file doesn’t exist)\n\n\n\n\nsource\n\n\n\n\n save_config (schema_name:str, config:Dict[str,Any],\n              config_dir:Optional[pathlib.Path]=None)\n\nSave configuration for a schema.\n\n\n\n\n\n\n\n\n\n\nType\nDefault\nDetails\n\n\n\n\nschema_name\nstr\n\nName of the schema/configuration to save\n\n\nconfig\nDict\n\nConfiguration dictionary to save\n\n\nconfig_dir\nOptional\nNone\nDirectory where config files are stored\n\n\nReturns\nbool\n\nTrue if save succeeded, False otherwise",
    "crumbs": [
      "core",
      "Utils"
    ]
  },
  {
    "objectID": "core/utils.html#schema-utilities",
    "href": "core/utils.html#schema-utilities",
    "title": "Utils",
    "section": "Schema Utilities",
    "text": "Schema Utilities\n\nsource\n\nget_default_values_from_schema\n\n get_default_values_from_schema (schema:Dict[str,Any])\n\nExtract default values from a JSON schema.\n\n\n\n\n\n\n\n\n\nType\nDetails\n\n\n\n\nschema\nDict\nJSON Schema dictionary\n\n\nReturns\nDict\nDictionary of default values extracted from schema\n\n\n\n\n# Example: Extract defaults from a schema\nfrom cjm_fasthtml_settings.core.config import get_app_config_schema\n\nschema = get_app_config_schema(app_title=\"Test App\", server_port=8000)\ndefaults = get_default_values_from_schema(schema)\n\nprint(\"Default values:\")\nfor key, value in defaults.items():\n    print(f\"  {key}: {value}\")\n\nDefault values:\n  app_title: Test App\n  config_dir: configs\n  auto_open_browser: True\n  server_port: 8000\n  server_host: 0.0.0.0\n  debug_mode: False\n  reload_on_change: False\n  max_upload_size_mb: 100\n  session_timeout_minutes: 60\n\n\n\nsource\n\n\nget_config_with_defaults\n\n get_config_with_defaults (schema_name:str, schema:Dict[str,Any],\n                           config_dir:Optional[pathlib.Path]=None)\n\nGet configuration with defaults merged with saved values.\n\n\n\n\n\n\n\n\n\n\nType\nDefault\nDetails\n\n\n\n\nschema_name\nstr\n\nName of the schema (or unique_id for grouped schemas)\n\n\nschema\nDict\n\nJSON Schema dictionary\n\n\nconfig_dir\nOptional\nNone\nDirectory where config files are stored\n\n\nReturns\nDict\n\nMerged configuration with defaults and saved values",
    "crumbs": [
      "core",
      "Utils"
    ]
  },
  {
    "objectID": "core/utils.html#form-data-conversion",
    "href": "core/utils.html#form-data-conversion",
    "title": "Utils",
    "section": "Form Data Conversion",
    "text": "Form Data Conversion\n\nsource\n\nconvert_form_data_to_config\n\n convert_form_data_to_config (form_data:dict, schema:Dict[str,Any])\n\nConvert form data to configuration dict based on schema.\n\n\n\n\nType\nDetails\n\n\n\n\nform_data\ndict\nRaw form data from request\n\n\nschema\nDict\nJSON Schema for type conversion\n\n\nReturns\ndict\nConverted configuration dictionary\n\n\n\n\n# Example: Convert form data\nfrom cjm_fasthtml_settings.core.config import get_app_config_schema\n\nschema = get_app_config_schema()\n\n# Simulate form data\nform_data = {\n    \"app_title\": \"My App\",\n    \"server_port\": \"8080\",  # String from form\n    \"auto_open_browser\": \"on\",  # Checkbox value\n    \"max_upload_size_mb\": \"250.5\",  # String number\n}\n\nconfig = convert_form_data_to_config(form_data, schema)\n\nprint(\"Converted config:\")\nfor key, value in config.items():\n    print(f\"  {key}: {value} ({type(value).__name__})\")\n\nConverted config:\n  app_title: My App (str)\n  server_port: 8080 (int)\n  auto_open_browser: True (bool)\n  max_upload_size_mb: 250.5 (float)\n  debug_mode: False (bool)\n  reload_on_change: False (bool)",
    "crumbs": [
      "core",
      "Utils"
    ]
  },
  {
    "objectID": "core/html_ids.html",
    "href": "core/html_ids.html",
    "title": "HTML IDs",
    "section": "",
    "text": "This class extends AppHtmlIds from cjm_fasthtml_app_core with settings-specific IDs.\nInherited from AppHtmlIds: - ALERT_CONTAINER: “alert-container” - MAIN_CONTENT: “main-content” - as_selector(id_str): Converts an ID to CSS selector format (with #)\nFor IDE Support: IDEs like VS Code with Pylance will autocomplete these attributes and warn if you try to access non-existent attributes.\nNote: The typing.Final annotation indicates these are constants that shouldn’t be reassigned at runtime.\n\nsource\n\nSettingsHtmlIds\n\n SettingsHtmlIds ()\n\nHTML ID constants for settings components.\n\n# Example usage\nprint(f\"Settings content ID: {SettingsHtmlIds.SETTINGS_CONTENT}\")\nprint(f\"As selector: {SettingsHtmlIds.as_selector(SettingsHtmlIds.SETTINGS_CONTENT)}\")\nprint(f\"Menu item for 'general': {SettingsHtmlIds.menu_item('general')}\")\nprint(f\"Alert container (inherited): {SettingsHtmlIds.ALERT_CONTAINER}\")\n\nSettings content ID: settings-content\nAs selector: #settings-content\nMenu item for 'general': menu-item-general\nAlert container (inherited): alert-container\n\n\n\n# Example: SettingsHtmlIds inherits from AppHtmlIds\nprint(f\"Inherited MAIN_CONTENT ID: {SettingsHtmlIds.MAIN_CONTENT}\")\nprint(f\"Inherited ALERT_CONTAINER: {SettingsHtmlIds.ALERT_CONTAINER}\")\nprint(f\"Settings-specific SETTINGS_CONTENT: {SettingsHtmlIds.SETTINGS_CONTENT}\")\nprint(f\"As selector (inherited method): {SettingsHtmlIds.as_selector(SettingsHtmlIds.SETTINGS_SIDEBAR)}\")\n\nInherited MAIN_CONTENT ID: main-content\nInherited ALERT_CONTAINER: alert-container\nSettings-specific SETTINGS_CONTENT: settings-content\nAs selector (inherited method): #settings-sidebar",
    "crumbs": [
      "core",
      "HTML IDs"
    ]
  }
]